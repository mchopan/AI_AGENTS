# -*- coding: utf-8 -*-
"""multiple_nodes_exercise.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1j05rJ5gRGQqAdCvXQYmtwCj-5YlOS-Gi
"""

from typing import TypedDict
from langgraph.graph import StateGraph, START, END

class AgentState(TypedDict):
  number1: str
  operation: str
  number2: str
  finalNumber: str
  number3: str
  operation2: str
  number4: str
  finalNumber2: str

def addNumber(state: AgentState) -> AgentState:
  """this node will add number1 and number2"""
  state['finalNumber'] = state['number1'] + state['number2']
  return state

def addNumber2(state: AgentState) -> AgentState:
  """this node will add number3 and number4"""
  state['finalNumber2'] = state['number3'] + state['number2']
  return state

def subtractNumber(state: AgentState) -> AgentState:
  """this node will subtract number1 and number2"""
  state['finalNumber'] = state['number1'] - state['number2']
  return state

def subtractNumber2(state: AgentState) -> AgentState:
  """this node will subtract number3 and number4"""
  state['finalNumber2'] = state['number3'] - state['number2']
  return state

def decide_operation(state: AgentState) -> AgentState:
  """this node will decide which operation to use"""
  if state['operation'] == '+':
      return "add_number1_number2"
  elif state['operation'] == '-':
    return "subtract_number1_number2"

def decide_operation2(state: AgentState) -> AgentState:
  """this node will decide which operation to use"""
  if state['operation2'] == '+':
      return "add_number3_number4"
  elif state['operation2'] == '-':
    return "subtract_number3_number4"

builder = StateGraph(AgentState)

builder.add_node("add_node1", addNumber)
builder.add_node("add_node2", addNumber2)
builder.add_node("subtract_node1", subtractNumber)
builder.add_node("subtract_node2", subtractNumber2)
builder.add_node("router", lambda state:state)
builder.add_node("router2", lambda state:state)

builder.add_edge(START, "router")

builder.add_conditional_edges(
    "router",
    decide_operation,
    {
        "add_number1_number2": "add_node1",
        "subtract_number1_number2": "subtract_node1"
    }
)

builder.add_edge("add_node1", "router2")
builder.add_edge("subtract_node1", "router2")

builder.add_conditional_edges(
    "router2",
    decide_operation2,
    {
        "add_number3_number4": "add_node2",
        "subtract_number3_number4": "subtract_node2"
    }
)

builder.add_edge("add_node2", END)
builder.add_edge("subtract_node2", END)

app = builder.compile()

from IPython.display import Image, display
display(Image(app.get_graph().draw_mermaid_png()))

intial_state = AgentState(number1=10, operation="+", number2=5, number3=100, operation2="-", number4=50)
app.invoke(intial_state)